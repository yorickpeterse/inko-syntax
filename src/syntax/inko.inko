# Lexical analysis of Inko source code.
import std.iter.Iter
import std.set.Set
import std.string.Bytes
import syntax.(EOF, Buffer, Token)
import syntax.helpers.(digit?, multibyte?, whitespace?)

let DQUOTE = 34
let HASH = 35
let SQUOTE = 39
let PLUS = 43
let HYPHEN = 45
let PERIOD = 46
let QUEST = 63
let UPPER_A = 65
let UPPER_E = 69
let UPPER_Z = 90
let BSLASH = 92
let UNDER = 95
let LOWER_A = 97
let LOWER_E = 101
let LOWER_Z = 122

let KEYWORDS = [
  'as', 'and', 'async', 'break', 'builtin', 'case', 'class', 'else', 'enum',
  'extern', 'false', 'fn', 'for', 'if', 'impl', 'import', 'let', 'loop',
  'match', 'move', 'mut', 'next', 'nil', 'or', 'pub', 'recover', 'ref',
  'return', 'self', 'static', 'throw', 'trait', 'true', 'try', 'uni', 'while',
]

fn letter?(byte: Int) -> Bool {
  (byte >= LOWER_A and byte <= LOWER_Z)
    or (byte >= UPPER_A and byte <= UPPER_Z)
}

fn symbol?(byte: Int) -> Bool {
  (byte >= 33 and byte <= 38)
    or (byte >= 40 and byte <= 47)
    or (byte >= 60 and byte <= 64)
    or (byte >= 91 and byte <= 96)
    or (byte >= 123 and byte <= 126)
}

# A type that turns Inko source code into a stream of tokens.
class pub Lexer[T: Bytes] {
  let @buffer: Buffer[T]
  let @keywords: Set[String]

  # Returns a new `Lexer` that lexes the given input.
  fn pub static new(bytes: T) -> Lexer[T] {
    Lexer {
      @buffer = Buffer.new(bytes),
      @keywords = KEYWORDS.iter.reduce(Set.new) fn (set, kw) {
        set.insert(kw)
        set
      }
    }
  }

  fn mut single_string -> Token {
    Token.SingleString(string(SQUOTE))
  }

  fn mut double_string -> Token {
    Token.DoubleString(string(DQUOTE))
  }

  fn mut string(quote: Int) -> String {
    let start = @buffer.offset

    @buffer.offset += 1

    while @buffer.get != EOF and @buffer.get != quote {
      @buffer.offset +=
        if @buffer.get == BSLASH and @buffer.peek(1) == quote { 2 } else { 1 }
    }

    @buffer.offset += 1
    @buffer.slice(start, @buffer.offset)
  }

  fn mut symbol -> Token {
    @buffer.offset += 1
    Token.Text(@buffer.slice(@buffer.offset - 1, @buffer.offset))
  }

  fn mut word -> Token {
    let start = @buffer.offset

    while @buffer.offset < @buffer.size {
      let cur = @buffer.get

      if letter?(cur) or digit?(cur) or cur == UNDER {
        @buffer.offset += 1
      } else if cur == QUEST {
        @buffer.offset += 1
        break
      } else {
        break
      }
    }

    match @buffer.slice(start, @buffer.offset) {
      case word if @keywords.contains?(word) -> Token.Keyword(word)
      case word -> Token.Text(word)
    }
  }

  fn mut multibyte_word -> Token {
    let start = @buffer.offset

    while multibyte?(@buffer.get) { @buffer.offset += 1 }

    Token.Text(@buffer.slice(start, @buffer.offset))
  }

  fn mut whitespace -> Token {
    let start = @buffer.offset

    @buffer.advance_whitespace
    Token.Text(@buffer.slice(start, @buffer.offset))
  }

  fn mut line_comment -> Token {
    let start = @buffer.offset

    @buffer.advance_until_eol
    Token.Comment(@buffer.slice(start, @buffer.offset))
  }

  fn mut number -> Token {
    let start = @buffer.offset

    digits

    match @buffer.get {
      case PERIOD -> {
        if digit?(@buffer.peek(1)).false? {
          return Token.Int(@buffer.slice(start, @buffer.offset - 1))
        }

        @buffer.offset += 2
        digits
        Token.Float(@buffer.slice(start, @buffer.offset))
      }
      case LOWER_E or UPPER_E -> {
        match @buffer.peek(1) {
          case PLUS or HYPHEN if digit?(@buffer.peek(2)) -> @buffer.offset += 3
          case byte if digit?(byte) -> @buffer.offset += 2
          case _ -> return Token.Int(@buffer.slice(start, @buffer.offset))
        }

        digits
        Token.Float(@buffer.slice(start, @buffer.offset))
      }
      case _ -> Token.Int(@buffer.slice(start, @buffer.offset))
    }
  }

  fn mut single_byte -> Token {
    @buffer.offset += 1
    Token.Text(@buffer.slice(@buffer.offset - 1, @buffer.offset))
  }

  fn mut digits {
    while digit?(@buffer.get) or @buffer.get == UNDER { @buffer.offset += 1 }
  }
}

impl Iter[Token] for Lexer {
  fn pub mut next -> Option[Token] {
    match @buffer.get {
      case DQUOTE -> Option.Some(double_string)
      case SQUOTE -> Option.Some(single_string)
      case HASH -> Option.Some(line_comment)
      case byte if digit?(byte) -> Option.Some(number)
      case byte if symbol?(byte) -> Option.Some(symbol)
      case byte if letter?(byte) -> Option.Some(word)
      case byte if whitespace?(byte) -> Option.Some(whitespace)
      case byte if multibyte?(byte) -> Option.Some(multibyte_word)
      case EOF -> Option.None
      case _ -> Option.Some(single_byte)
    }
  }
}
