# Methods for working with raw bytes in lexers.
let TAB = 9
let LF = 10
let CR = 13
let SPACE = 32
let EXCL = 33
let DQUOTE = 34
let HASH = 35
let DOLLAR = 36
let PERCENT = 37
let AMP = 38
let SQUOTE = 39
let LPAREN = 40
let RPAREN = 41
let AST = 42
let PLUS = 43
let HYPHEN = 45
let PERIOD = 46
let SLASH = 47
let ZERO = 48
let NINE = 57
let COLON = 58
let LT = 60
let GT = 62
let QUEST = 63
let AT = 64
let UPPER_A = 65
let UPPER_E = 69
let UPPER_Z = 90
let LBRACK = 91
let BSLASH = 92
let RBRACK = 93
let UNDER = 95
let LOWER_A = 97
let LOWER_E = 101
let LOWER_Z = 122
let LCURLY = 123
let RCURLY = 125

fn whitespace?(byte: Int) -> Bool {
  byte == SPACE or byte == CR or byte == LF or byte == TAB
}

fn digit?(byte: Int) -> Bool {
  byte >= ZERO and byte <= NINE
}

fn multibyte?(byte: Int) -> Bool {
  byte >= 128
}

fn letter?(byte: Int) -> Bool {
  (byte >= LOWER_A and byte <= LOWER_Z)
    or (byte >= UPPER_A and byte <= UPPER_Z)
}

fn letter_or_digit?(byte: Int) -> Bool {
  letter?(byte) or digit?(byte)
}

fn symbol?(byte: Int) -> Bool {
  (byte >= 33 and byte <= 38)
    or (byte >= 40 and byte <= 47)
    or (byte >= 60 and byte <= 64)
    or (byte >= 91 and byte <= 96)
    or (byte >= 123 and byte <= 126)
}
