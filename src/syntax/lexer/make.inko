# Lexical analysis of Make/Makefile syntax.
import std.iter (Iter)
import syntax (
  Buffer, EOF, Keywords, Language, Languages, Lexer as LexerTrait, Token,
  TokenKind,
)
import syntax.bytes
import syntax.helpers

let KEYWORDS = [
  'abspath',
  'addprefix',
  'addsuffix',
  'and',
  'basename',
  'call',
  'dir',
  'else',
  'endif',
  'error',
  'eval',
  'export',
  'file',
  'filter',
  'filter-out',
  'findstring',
  'firstword',
  'flavor',
  'foreach',
  'if',
  'ifdef',
  'ifeq',
  'ifndef',
  'ifneq',
  'join',
  'lastword',
  'notdir',
  'or',
  'origin',
  'patsubst',
  'realpath',
  'shell',
  'sort',
  'strip',
  'subst',
  'suffix',
  'unexport',
  'value',
  'warning',
  'wildcard',
  'word',
  'wordlist',
  'words',
]
let TARGETS = [
  '.DEFAULT',
  '.DELETE_ON_ERROR',
  '.EXPORT_ALL_VARIABLES',
  '.IGNORE',
  '.INTERMEDIATE',
  '.LOW_RESOLUTION_TIME',
  '.NOTINTERMEDIATE',
  '.NOTPARALLEL',
  '.ONESHELL',
  '.PHONY',
  '.POSIX',
  '.PRECIOUS',
  '.SECONDARY',
  '.SECONDEXPANSION',
  '.SILENT',
  '.SUFFIXES',
]

# Registers the lexer with the lexers registry.
fn pub register(languages: mut Languages) {
  languages.add(
    Language(
      name: 'make',
      aliases: [],
      builder: fn (in) { Lexer.new(in) as LexerTrait },
    ),
  )
}

# A lexer for Make/Makefile syntax.
class pub Lexer {
  let @buffer: Buffer
  let @keywords: Keywords
  let @targets: Keywords

  # Returns a new `Lexer` that lexes the given input.
  fn pub static new(bytes: ref ByteArray) -> Lexer {
    Lexer(
      buffer: Buffer.new(bytes),
      keywords: Keywords.new(KEYWORDS),
      targets: Keywords.new(TARGETS),
    )
  }

  fn mut word -> Token {
    helpers.text_or_keyword(@buffer, @keywords, fn (b) {
      bytes.letter_or_digit?(b)
        or b == bytes.UNDER
        or (b == bytes.HYPHEN and bytes.letter_or_digit?(@buffer.peek(1)))
    })
  }

  fn mut target -> Token {
    helpers.text_or_keyword(@buffer, @targets, fn (b) {
      bytes.letter?(b) or b == bytes.UNDER or b == bytes.PERIOD
    })
  }
}

impl Iter[Token] for Lexer {
  fn pub mut next -> Option[Token] {
    match @buffer.get {
      case bytes.DQUOTE -> Option.Some(helpers.double_string(@buffer))
      case bytes.SQUOTE -> Option.Some(helpers.single_string(@buffer))
      case bytes.HASH -> Option.Some(helpers.line_comment(@buffer))
      case bytes.PERIOD if bytes.letter?(@buffer.peek(1)) -> Option.Some(target)
      case byte if bytes.digit?(byte) -> Option.Some(helpers.integer(@buffer))
      case byte if bytes.letter?(byte) -> Option.Some(word)
      case byte if bytes.whitespace?(byte) -> {
        Option.Some(helpers.whitespace(@buffer))
      }
      case byte if bytes.multibyte?(byte) -> {
        Option.Some(helpers.multi_byte(@buffer))
      }
      case EOF -> Option.None
      case _ -> Option.Some(helpers.single_byte(@buffer))
    }
  }
}

impl LexerTrait for Lexer {
  fn pub mut buffer -> mut Buffer {
    @buffer
  }
}
