# Lexical analysis of Inko syntax.
import std.iter (Iter)
import syntax (
  Buffer, EOF, Keywords, Language, Languages, Lexer as LexerTrait, Token,
  TokenKind,
)
import syntax.bytes
import syntax.helpers

let KEYWORDS = [
  'and',
  'as',
  'async',
  'break',
  'builtin',
  'case',
  'class',
  'copy',
  'else',
  'enum',
  'extern',
  'false',
  'fn',
  'for',
  'if',
  'impl',
  'import',
  'inline',
  'let',
  'loop',
  'match',
  'move',
  'mut',
  'next',
  'nil',
  'or',
  'pub',
  'recover',
  'ref',
  'return',
  'self',
  'static',
  'throw',
  'trait',
  'true',
  'try',
  'type',
  'uni',
  'while',
]

# Registers the lexer with the lexers registry.
fn pub register(languages: mut Languages) {
  languages.add(
    Language(
      name: 'inko',
      aliases: [],
      builder: fn (in) { Lexer.new(in) as LexerTrait },
    ),
  )
}

fn word_byte?(buffer: mut Buffer, byte: Int) -> Bool {
  if bytes.letter_or_digit?(byte) or byte == bytes.UNDER { return true }

  if byte == bytes.QUEST { buffer.offset += 1 }

  false
}

# A lexer for Inko syntax.
type pub Lexer {
  let @buffer: Buffer
  let @keywords: Keywords

  # Returns a new `Lexer` that lexes the given input.
  fn pub static new(bytes: ref ByteArray) -> Lexer {
    Lexer(buffer: Buffer.new(bytes), keywords: Keywords.new(KEYWORDS))
  }

  fn mut word -> Token {
    helpers.text_or_keyword(@buffer, @keywords, fn (b) {
      word_byte?(@buffer, b)
    })
  }

  fn mut field -> Token {
    let start = @buffer.offset

    @buffer.offset += 1
    @buffer.advance_while(fn (b) { word_byte?(@buffer, b) })

    if @buffer.offset == (start + 1) {
      @buffer.token(TokenKind.Text, start)
    } else {
      @buffer.token(TokenKind.Field, start)
    }
  }
}

impl Iter[Token] for Lexer {
  fn pub mut next -> Option[Token] {
    match @buffer.get {
      case bytes.DQUOTE -> Option.Some(helpers.double_string(@buffer))
      case bytes.SQUOTE -> Option.Some(helpers.single_string(@buffer))
      case bytes.HASH -> Option.Some(helpers.line_comment(@buffer))
      case bytes.AT -> Option.Some(field)
      case byte if bytes.digit?(byte) -> {
        Option.Some(helpers.int_or_float(@buffer))
      }
      case byte if bytes.letter?(byte) -> Option.Some(word)
      case byte if bytes.whitespace?(byte) -> {
        Option.Some(helpers.whitespace(@buffer))
      }
      case byte if bytes.multibyte?(byte) -> {
        Option.Some(helpers.multi_byte(@buffer))
      }
      case EOF -> Option.None
      case _ -> Option.Some(helpers.single_byte(@buffer))
    }
  }
}

impl LexerTrait for Lexer {
  fn pub mut buffer -> mut Buffer {
    @buffer
  }
}
