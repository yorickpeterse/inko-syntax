# Lexical analysis of C syntax.
import syntax (
  Buffer, EOF, Keywords, Language, Languages, Lexer as LexerTrait, Token,
  TokenKind,
)
import syntax.bytes
import syntax.helpers

let KEYWORDS = [
  '_Alignas',
  '_Alignof',
  '_Atomic',
  '_Generic',
  '_Imaginary',
  '_Noreturn',
  '_Static_assert',
  '_Thread_local',
  'auto',
  'break',
  'case',
  'const',
  'continue',
  'default',
  'do',
  'else',
  'enum',
  'extern',
  'for',
  'goto',
  'if',
  'register',
  'restricted',
  'return',
  'sizeof',
  'static',
  'struct',
  'switch',
  'typedef',
  'union',
  'virtual',
  'volatile',
  'while',
]

# Registers the lexer with the lexers registry.
fn pub register(languages: mut Languages) {
  languages.add(
    Language(
      name: 'c',
      aliases: ['cpp'],
      builder: fn (in) { Lexer.new(in) as LexerTrait },
    ),
  )
}

fn word_byte?(byte: Int) -> Bool {
  bytes.letter_or_digit?(byte) or byte == bytes.UNDER
}

# A lexer for C.
type pub Lexer {
  let @buffer: Buffer
  let @keywords: Keywords

  # Returns a new `Lexer` that lexes the given input.
  fn pub static new(bytes: ref ByteArray) -> Lexer {
    Lexer(buffer: Buffer.new(bytes), keywords: Keywords.new(KEYWORDS))
  }

  fn mut word -> Token {
    helpers.text_or_keyword(@buffer, @keywords, fn (b) { word_byte?(b) })
  }

  fn mut ampersand -> Token {
    let start = @buffer.offset

    @buffer.offset += 1
    @buffer.token(TokenKind.Keyword, start)
  }

  fn mut macro -> Token {
    let start = @buffer.offset

    @buffer.advance_while(fn (b) { b == bytes.HASH })
    @buffer.advance_while(fn (b) { word_byte?(b) })
    @buffer.token(TokenKind.Macro, start)
  }
}

impl LexerTrait for Lexer {
  fn pub mut next -> Option[Token] {
    match @buffer.get {
      case bytes.DQUOTE -> Option.Some(helpers.double_string(@buffer))
      case bytes.SQUOTE -> Option.Some(helpers.single_string(@buffer))
      case bytes.SLASH -> Option.Some(helpers.c_style_comment(@buffer))
      case bytes.HASH -> Option.Some(macro)
      case bytes.AMP -> Option.Some(ampersand)
      case byte if bytes.digit?(byte) -> {
        Option.Some(helpers.int_or_float(@buffer))
      }
      case byte if bytes.letter?(byte) -> Option.Some(word)
      case bytes.UNDER if bytes.letter_or_digit?(@buffer.peek(1)) -> {
        Option.Some(word)
      }
      case byte if bytes.whitespace?(byte) -> {
        Option.Some(helpers.whitespace(@buffer))
      }
      case byte if bytes.multibyte?(byte) -> {
        Option.Some(helpers.multi_byte(@buffer))
      }
      case EOF -> Option.None
      case _ -> Option.Some(helpers.single_byte(@buffer))
    }
  }

  fn pub mut buffer -> mut Buffer {
    @buffer
  }
}
