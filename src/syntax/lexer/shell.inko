# Lexical analysis of Bash/shell syntax.
import std.iter.Iter
import syntax.(
  EOF, Buffer, Keywords, Language, Lexer as LexerTrait, Languages, Token,
  TokenKind
)
import syntax.helpers.(digit?, letter?, multibyte?, whitespace?)

let DQUOTE = 34
let HASH = 35
let SQUOTE = 39
let UNDER = 95

let KEYWORDS = [
  'alias', 'bg', 'bind', 'break', 'builtin', 'caller', 'cd', 'command',
  'compgen', 'complete', 'continue', 'declare', 'dirs', 'disown', 'do', 'done',
  'elif', 'else', 'enable', 'esac', 'eval', 'exec', 'exit', 'export', 'false',
  'fc', 'fg', 'fi', 'for', 'function', 'getopts', 'hash', 'help', 'history',
  'if', 'in', 'jobs', 'let', 'local', 'logout', 'mapfile', 'popd', 'pushd',
  'pwd', 'read', 'readonly', 'return', 'select', 'set', 'shift', 'shopt',
  'source', 'suspend', 'test', 'then', 'time', 'times', 'trap', 'true', 'type',
  'typeset', 'ulimit', 'umask', 'unalias', 'unset', 'until', 'wait', 'while',
]

# Registers the lexer with the lexers registry.
fn pub register(languages: mut Languages) {
  languages.add(Language {
    @name = 'shell',
    @aliases = ['bash', 'sh', 'zsh', 'ksh', 'shell'],
    @builder = fn (in) { Lexer.new(in) as LexerTrait }
  })
}

# A lexer for common shell syntax, such as Bash and Zsh.
class pub Lexer {
  let @buffer: Buffer
  let @keywords: Keywords

  # Returns a new `Lexer` that lexes the given input.
  fn pub static new(bytes: ref ByteArray) -> Lexer {
    Lexer {
      @buffer = Buffer.new(bytes),
      @keywords = Keywords.new(KEYWORDS),
    }
  }

  fn mut single_string -> Token {
    @buffer.delimited_token(TokenKind.SingleString, SQUOTE, escape: true)
  }

  fn mut double_string -> Token {
    @buffer.delimited_token(TokenKind.DoubleString, DQUOTE, escape: true)
  }

  fn mut word -> Token {
    let start = @buffer.offset

    @buffer.advance_while fn (b) { letter?(b) or digit?(b) or b == UNDER }

    let size = @buffer.offset - start
    let kind = if @keywords.contains_range?(@buffer.bytes, start, size) {
      TokenKind.Keyword
    } else {
      TokenKind.Text
    }

    @buffer.token(kind, start)
  }

  fn mut line_comment -> Token {
    @buffer.token_line(TokenKind.Comment)
  }

  fn mut number -> Token {
    @buffer.token_containing(TokenKind.Int) fn (b) { digit?(b) }
  }

  fn mut whitespace -> Token {
    @buffer.token_containing(TokenKind.Text) fn (b) { whitespace?(b) }
  }

  fn mut single_byte -> Token {
    @buffer.single_byte_token(TokenKind.Text)
  }

  fn mut multibyte_word -> Token {
    @buffer.token_containing(TokenKind.Text) fn (b) { multibyte?(b) }
  }
}

impl Iter[Token] for Lexer {
  fn pub mut next -> Option[Token] {
    match @buffer.get {
      case DQUOTE -> Option.Some(double_string)
      case SQUOTE -> Option.Some(single_string)
      case HASH -> Option.Some(line_comment)
      case byte if digit?(byte) -> Option.Some(number)
      case byte if letter?(byte) -> Option.Some(word)
      case byte if whitespace?(byte) -> Option.Some(whitespace)
      case byte if multibyte?(byte) -> Option.Some(multibyte_word)
      case EOF -> Option.None
      case _ -> Option.Some(single_byte)
    }
  }
}

impl LexerTrait for Lexer {
  fn pub mut buffer -> mut Buffer {
    @buffer
  }
}
