# Methods for turning bytes into tokens.
import syntax.(Buffer, Keywords, Token, TokenKind)
import syntax.bytes

fn digits_or_underscore(buffer: mut Buffer) {
  buffer.advance_while fn (b) { bytes.digit?(b) or b == bytes.UNDER }
}

fn token_containing(
  buffer: mut Buffer,
  kind: TokenKind,
  condition: fn (Int) -> Bool,
) -> Token {
  let start = buffer.offset

  buffer.advance_while(condition)
  buffer.token(kind, start)
}

fn delimited_token(
  buffer: mut Buffer,
  kind: TokenKind,
  close: Int,
  start: Int,
  escape: Bool,
) -> Token {
  # Advance over the opening byte.
  buffer.offset += 1
  buffer.advance_while fn (b) {
    if b == close {
      buffer.offset += 1
      return false
    }

    if escape and b == bytes.BSLASH and buffer.peek(1) == close {
      buffer.offset += 1
    }

    true
  }

  buffer.token(kind, start)
}

fn single_byte(buffer: mut Buffer) -> Token {
  let start = buffer.offset

  buffer.offset += 1
  buffer.token(TokenKind.Text, start)
}

fn multi_byte(buffer: mut Buffer) -> Token {
  token_containing(buffer, TokenKind.Text) fn (b) { bytes.multibyte?(b) }
}

fn whitespace(buffer: mut Buffer) -> Token {
  token_containing(buffer, TokenKind.Text) fn (b) { bytes.whitespace?(b) }
}

fn integer(buffer: mut Buffer) -> Token {
  token_containing(buffer, TokenKind.Int) fn (b) { bytes.digit?(b) }
}

fn line_comment(buffer: mut Buffer) -> Token {
  token_containing(buffer, TokenKind.Comment) fn (b) { b != bytes.LF }
}

fn single_string(buffer: mut Buffer) -> Token {
  delimited_token(
    buffer, TokenKind.String, bytes.SQUOTE, start: buffer.offset, escape: true
  )
}

fn double_string(buffer: mut Buffer) -> Token {
  delimited_token(
    buffer, TokenKind.String, bytes.DQUOTE, start: buffer.offset, escape: true
  )
}

fn text_or_keyword(
  buffer: mut Buffer,
  keywords: ref Keywords,
  condition: fn (Int) -> Bool,
) -> Token {
  let start = buffer.offset

  buffer.advance_while(condition)

  if keywords.contains_range?(buffer.bytes, start, buffer.offset - start) {
    buffer.token(TokenKind.Keyword, start)
  } else {
    buffer.token(TokenKind.Text, start)
  }
}

fn int_or_float(buffer: mut Buffer) -> Token {
  let start = buffer.offset

  digits_or_underscore(buffer)

  match buffer.get {
    case bytes.PERIOD -> {
      if bytes.digit?(buffer.peek(1)).false? {
        return Token.new(
          TokenKind.Int,
          value: buffer.slice(start, buffer.offset - 1 - start)
        )
      }

      buffer.offset += 2
      digits_or_underscore(buffer)
      buffer.token(TokenKind.Float, start)
    }
    case bytes.LOWER_E or bytes.UPPER_E -> {
      match buffer.peek(1) {
        case bytes.PLUS or bytes.HYPHEN if bytes.digit?(buffer.peek(2)) -> {
          buffer.offset += 3
        }
        case byte if bytes.digit?(byte) -> buffer.offset += 2
        case _ -> return buffer.token(TokenKind.Int, start)
      }

      digits_or_underscore(buffer)
      buffer.token(TokenKind.Float, start)
    }
    case _ -> buffer.token(TokenKind.Int, start)
  }
}

fn c_style_comment(buffer: mut Buffer) -> Token {
  match buffer.peek(1) {
    case bytes.SLASH -> line_comment(buffer)
    case bytes.AST -> {
      let start = buffer.offset

      buffer.offset += 2
      buffer.advance_while fn (b) {
        if b == bytes.AST and buffer.peek(1) == bytes.SLASH {
          buffer.offset += 2
          false
        } else {
          true
        }
      }

      buffer.token(TokenKind.Comment, start)
    }
    case _ -> single_byte(buffer)
  }
}
